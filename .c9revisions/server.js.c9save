{"ts":1341021377244,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"\n//user\nvar usr = require('./user');\n//colors\nvar col = require('./colors');\n//http object\nvar http = require('http');\n//create a server\nvar express = require('express');\nvar app = express.createServer();\n//array of users - we support at most 4 users at a time\nvar table = [new usr.User(),new usr.User(),new usr.User(),new usr.User()];\n//chat stream\nvar chat = [];\nvar chatIndex = 0;\nvar chatMax = 1000;\n\n//sentiment output stream\nvar sentiment = [];\nvar sentimentIndex = 0;\nvar sentimentMax = 5000;\n\n//circles\nvar circles = [];\n\nvar inUse = false;\n\n//sentiwordnet\nvar swn = false;\n\n/*\ndeliver index.html\n*/\napp.use(express.static(__dirname + '/chat'));\n\n/*\ndeliver test.html\n*/\napp.use('/test', express.static(__dirname + '/test'));\n\n/*\nGET /table \nreturns the current list of users on the table\nexample output - \n[{\"name\":\"user1\",\"color\":\"#11AFBA\",\"position\":\"0\",\"theme\":1},\n {\"name\":\"user2\",\"color\":\"#A82A2A\",\"position\":\"1\",\"theme\":3}, ...]\n*/\napp.get('/table', function(req, res){\n    var arr = [];\n    for(var i in table){\n        var obj = table[i].getData();\n        if(obj !== null){\n            if(obj.position < 0){\n                obj.position = i;\n            }\n            arr.push(obj);\n        } \n    }\n    res.json(arr,200);\n});\n\n/*\nGET /stream\nparams:\nlast = the last index that was recieved from previous calls.\nif this is the first call, call with negative last\nreturns the chat stream\nexample output - \n[{\"name\":\"user1\", \"color\":\"#11AFBA\",\"text\":\"Hi\",\"index\":\"10\",\"pos\":\"1\",\"time\":\"1256953732\"},\n{\"name\":\"user2\", \"color\":\"#A82A2A\",\"text\":\"ssup?\",\"index\":\"11\",\"pos\":\"4\",\"time\":\"1256958752\"},\n{\"name\":\"user1\", \"color\":\"#11AFBA\",\"text\":\"nm\",\"index\":\"12\",\"pos\":\"1\",\"time\":\"1257958442\"}]\n\nthe color is adjusted as per the average sentiment\n*/\napp.get('/stream', function(req, res){\n    var last = req.param('last');\n    var arr = [];\n    for(var i in chat){\n        if(chat[i].index > last){\n            arr.push(chat[i]);\n        }\n    }\n    res.json(arr,200);\n});\n\n/*\nGET /sentiments\nparams:\nlast = the last index that was recieved from previous calls.\nif this is the first call, call with negative last\nreturns the sentiment stream\nexample output -\n[{\"pos\":\"4\",\"color\":\"#0D3233\", \"text\":\"keyword\",\"index\"=\"4\"},{...}]\n\nthe color is adjusted as per sentiment score for each keyword\n*/\napp.get('/sentiments', function(req, res){\n    var last = req.param('last');\n    var arr = [];\n    for(var i in sentiment){\n        if(sentiment[i].index > last){\n            arr.push(sentiment[i]);\n        }\n    }\n    res.json(arr,200);\n});\n\n/*\nPOST /user\nparams:\nname = the user name of the user to add \ntheme = the color theme for the user \npos = the position of the user (see position in User.join)\n*/\napp.post('/user', function(req, res){\n    var name = req.param('name');\n    var theme = req.param('theme');\n    var pos = req.param('pos');\n    if(pos != undefined && pos >= 0 && pos <= 3 &&\n       theme !== undefined && theme > 0 && theme <= 4 &&\n       name !== undefined && name.length > 0){\n        inUse = true;\n        table[pos].join(theme, name, pos);\n        res.send('',200);\n    }\n});\n\n/*\nDELETE /user\nparams:\npos = position of the user\n*/\napp.del('/user',function(req,res){\n    var pos = req.param('pos');\n    if(pos != undefined && pos >= 0 && pos <= 3){\n        table[pos].leave();\n        inUse = false;\n        for(var i in table){\n            if(table[i].isConversing){\n                inUse = true;\n                break;\n            }\n        }\n        if(!inUse){\n            reset();\n        }\n    }\n    res.send('',200);\n});\n\n/*\nPOST /chat\nparams:\npos = the position of the user\ntext = the stuff the user said\n*/\napp.post('/chat', function(req, res){\n    var pos = req.param('pos');\n    var text = req.param('text');\n    if(pos !== undefined && pos >= 0 && pos <=3 &&\n       text !== undefined && text.length > 0){\n        addChatLine(text,pos);\n    }\n    res.send('',200);\n});\n\n/*\nGET postcircles \nThis is pretty much a terrible idea\nparams:\narr = [{'x':3,'y':4,'rad':5,'ang':'-1','chr':'a',col:'#2323ff'}, ...]\n*/\napp.get('/postcircles', function(req,res){\n    var arr = req.param('arr');\n    if(arr !== undefined){\n        console.log(arr);\n        circles = JSON.parse(arr);\n        res.send('',200);\n    }\n});\n\n/*\nGET /circles\n*/\napp.get('/circles', function(req, res){\n    res.json(circles,200);\n});\n\n/*\nGET /reset\nforcibly resets the conversation\n*/\napp.get('/reset', function(req, res){\n    reset();\n    res.send('',200);\n});\n\n/*\nPOST /swn\nparam:\nval : true or false\nfalse = use AlchemyAPI\ntrue = use SentiWordNet\n*/\napp.post('/swn',function(req,res){\n    var val = req.param('val');\n    if(val !== undefined){\n        swn = (val == 'true');\n    }\n});\n\n/*\nadds keywords to the sentiment stream\nalso adds chatObj to the chat stream after adjusting its color\n*/\nfunction addSentiment(text, pos, chatObj){\n    if(sentiment.length == sentimentMax){\n        sentiment.pop();\n    }\n    getSentiments(text, function(keywords){\n        var avg = 0;\n        for (var i in keywords){\n            var color = getSentimentColor(col.theme.getColor(table[pos].theme),\n                                              parseFloat(keywords[i].sentiment));\n            var obj = {\n                \"pos\" : pos,\n                \"color\" : color,\n                \"text\" : keywords[i].text,\n                \"index\" : sentimentIndex\n            };\n            sentimentIndex++;\n            sentiment.push(obj);\n            avg += parseFloat(keywords[i].sentiment);\n        }\n        if(keywords.length != 0){\n            avg = avg / keywords.length;\n            //adjust color in chat\n            chatObj.color = getSentimentColor(chatObj.color,avg);\n        }\n        //add the chat object with the sentiment adjusted color\n        chatIndex++;\n        chat.push(chatObj);\n    });\n}\n\n/*\nadds text to the chat stream\nreturns the index where the last chat line was added\n*/\nfunction addChatLine(text, pos){\n    if(chat.length == chatMax){\n        chat.pop();\n    }\n    var obj = {\n        \"pos\" : pos,\n        \"color\" : table[pos].color,\n        \"text\" : text,\n        \"index\" : chatIndex,\n        \"name\" : table[pos].name,\n        \"time\" : String(Math.round(new Date().getTime() / 1000))\n    };\n    addSentiment(text, pos, obj);\n}\n\n/*\nextracts sentiment scores from the text\nuses AlchemyAPI by default. \nuses SentiWordNet if swn is true\n*/\nfunction getSentiments(text,callback){\n    if(swn){\n        getSentimentsFromSWN(text,callback);\n    }\n    else{\n        getSentimentsFromAlchemy(text,callback);\n    }\n}\n\n/*\nextracts sentiment score using AlchemyAPI\n*/\nfunction getSentimentsFromAlchemy(text, callback){\n    var apikey = '1e9868483244e57f2ddb61670c0b361ed2a2f204';\n    var alchemy = {\n        host: 'access.alchemyapi.com',\n        path: '/calls/text/TextGetRankedKeywords?apikey='+ apikey +\n              '&outputMode=json&maxRetrieve=5&sentiment=1&text=' \n              + encodeURIComponent(text)\n    };\n\n    http.get(alchemy, function(res){\n        var data = \"\";\n        res.on('data', function(chunk){\n            data+=chunk;\n        });\n        res.on('end', function(){\n            var dataobj = JSON.parse(data);\n            var keywords = [];\n            for(var i in dataobj.keywords){\n                var t = dataobj.keywords[i].text;\n                var s = 0;\n                if(dataobj.keywords[i].sentiment.type != 'neutral'){\n                    s = dataobj.keywords[i].sentiment.score;\n                }\n                keywords.push({\n                    'text': t,\n                    'sentiment' : s\n                });\n            }\n            callback(keywords);\n        });\n    });\n}\n\n/*\nextracts sentiment score using SentiWordNet\nthis function does absolutely nothing to select important keywords\nwhich may result in it generating a lot of keyword\n*/\nfunction getSentimentsFromSWN(text, callback){    \n    var sentiwordnet = {\n        host: 'www.tweetsichord.com',\n        path: '/sentiwordnet.php?q=' + encodeURIComponent(text)\n    };\n\n    http.get(sentiwordnet, function(res){\n        var data = \"\";\n        res.on('data', function(chunk){\n            data+=chunk;\n        });\n        res.on('end', function(){\n            var dataObj = JSON.parse(data);\n            callback(dataObj);\n        });\n    });\n}\n\n/*\ntakes a #rrbbgg color string, adjusts value in hsv space as per the score\nwhich is in a [-1,1] range\nand returns another color string\n*/\nfunction getSentimentColor(color, score){\n    //get the color\n    color = color.trim();\n\n    var r = parseInt(color.substring(1,3),16);\n    var g = parseInt(color.substring(3,5),16);\n    var b = parseInt(color.substring(5,7),16);\n    var hsv = col.rgbToHsv(r,g,b);\n    //change the value (hsv[2])\n    score += 1; //score is now in [0,2] range\n    hsv[2] = Math.round(40 + score*30);\n    var rgb = col.hsvToRgb(hsv[0],hsv[1],hsv[2]);\n    var str = '#';\n    for(var i in rgb){\n        var temp = rgb[i].toString(16);\n        if(temp.length == 1){\n            temp = '0'+temp;\n        }\n        str+=temp;\n    }\n    return str;\n}\n\n/*\nreset the conversation\n*/\nfunction reset(){\n    //remove all users\n    for(var i in table){\n        table[i].leave();\n    }\n    //reset chat\n    chat = [];\n    chatIndex = 0;\n    //reset  sentiment\n    sentiment = [];\n    sentimentIndex = 0;\n    //reset circles\n    circles = [];\n    \n    inUse = false;\n}\n\napp.listen(process.env.PORT);\n"]],"start1":0,"start2":0,"length1":0,"length2":9362}]],"length":9362}
{"contributors":[],"silentsave":false,"ts":1343869208092,"patch":[[{"diffs":[[0,"6953732\""],[1,", amp:4"],[0,"},\n{\"nam"]],"start1":1505,"start2":1505,"length1":16,"length2":23},{"diffs":[[0,"6958752\""],[1,", amp:5"],[0,"},\n{\"nam"]],"start1":1607,"start2":1607,"length1":16,"length2":23},{"diffs":[[0,"7958442\""],[1,", amp:1"],[0,"}]\n\nthe "]],"start1":1706,"start2":1706,"length1":16,"length2":23},{"diffs":[[0,"er said\n"],[1,"amp = amplitude (0-8. defaults to 4)\n"],[0,"*/\napp.p"]],"start1":3652,"start2":3652,"length1":16,"length2":53},{"diffs":[[0,"am('text');\n"],[1,"    var amp = req.param('amp');\n"],[0,"    if(pos !"]],"start1":3792,"start2":3792,"length1":24,"length2":56},{"diffs":[[0,"xt.length > 0){\n"],[1,"        if (amp === undefined) {\n            amp = 4;\n        }\n"],[0,"        addChatL"]],"start1":3918,"start2":3918,"length1":32,"length2":96},{"diffs":[[0,"text,pos"],[1,", amp"],[0,");\n    }"]],"start1":4018,"start2":4018,"length1":16,"length2":21},{"diffs":[[0,"ext, pos"],[1,", amp"],[0,"){\n    i"]],"start1":6064,"start2":6064,"length1":16,"length2":21},{"diffs":[[0,"].name,\n"],[-1,""],[0,"        "]],"start1":6289,"start2":6289,"length1":16,"length2":16},{"diffs":[[0,"/ 1000))"],[1,",\n        \"amp\" : amp"],[0,"\n    };\n"]],"start1":6353,"start2":6353,"length1":16,"length2":37}]],"length":9547,"saved":false}
{"ts":1343869553894,"patch":[[{"diffs":[[0,"732\""],[-1,", amp:4"],[0,"},\n{"]],"start1":1509,"start2":1509,"length1":15,"length2":8},{"diffs":[[0,"752\""],[-1,", amp:5"],[0,"},\n{"]],"start1":1604,"start2":1604,"length1":15,"length2":8},{"diffs":[[0,"442\""],[-1,", amp:1"],[0,"}]\n\n"]],"start1":1696,"start2":1696,"length1":15,"length2":8},{"diffs":[[0,"dex\"=\"4\""],[-1,""],[0,""],[1,",\"amp\":4"],[0,"},{...}]"]],"start1":2218,"start2":2218,"length1":16,"length2":24},{"diffs":[[0,"t, pos, "],[-1,""],[0,""],[1,"amp, "],[0,"chatObj)"]],"start1":4968,"start2":4968,"length1":16,"length2":21},{"diffs":[[0,"entIndex"],[-1,""],[0,""],[1,",\n                \"amp\" : amp"],[0,"\n       "]],"start1":5485,"start2":5485,"length1":16,"length2":45},{"diffs":[[0,"00))"],[-1,",\n        \"amp\" : amp"],[0,"\n   "]],"start1":6378,"start2":6378,"length1":29,"length2":8},{"diffs":[[0,"xt, pos,"],[1," amp,"],[0," obj);\n}"]],"start1":6409,"start2":6409,"length1":16,"length2":21},{"diffs":[[0,"&text=' "],[1,"+"],[0,"\n       "]],"start1":7055,"start2":7055,"length1":16,"length2":17},{"diffs":[[0,"        "],[-1," +"],[0," encodeU"]],"start1":7070,"start2":7070,"length1":18,"length2":16}]],"length":9551,"saved":false}
{"contributors":[],"silentsave":false,"ts":1348089124505,"patch":[[{"diffs":[[1,"\n//user\nvar usr = require('./user');\n//colors\nvar col = require('./colors');\n//create a server\nvar express = require('express');\nvar app = express();\n//array of users\nvar users = [];\n\n//chat stream\nvar chat = [];\nvar chatIndex = 0;\nvar chatMax = 1000;\n\n//sentiment output stream\nvar sentiment = [];\nvar sentimentIndex = 0;\nvar sentimentMax = 5000;\n\n//circles\nvar circles = [];\n\nvar inUse = false;\n\n//sentiwordnet\nvar swn = false;\n\n/*\ndeliver index.html\n*/\napp.use(express.static(__dirname + '/chat'));\n\n/*\ndeliver test.html\n*/\napp.use('/test', express.static(__dirname + '/test'));\n\n/*\nGET /table \nreturns the current list of users on the table\nexample output - \n[{\"name\":\"user1\",\"color\":\"#11AFBA\",\"position\":\"0\",\"theme\":1},\n {\"name\":\"user2\",\"color\":\"#A82A2A\",\"position\":\"1\",\"theme\":3}, ...]\n*/\napp.get('/table', function(req, res){\n    var arr = [];\n    for(var i in table){\n        var obj = table[i].getData();\n        if(obj !== null){\n            if(obj.position < 0){\n                obj.position = i;\n            }\n            arr.push(obj);\n        } \n    }\n    res.json(arr,200);\n});\n\n/*\nGET /stream\nparams:\nlast = the last index that was recieved from previous calls.\nif this is the first call, call with negative last\nreturns the chat stream\nexample output - \n[{\"name\":\"user1\", \"color\":\"#11AFBA\",\"text\":\"Hi\",\"index\":\"10\",\"pos\":\"1\",\"time\":\"1256953732\"},\n{\"name\":\"user2\", \"color\":\"#A82A2A\",\"text\":\"ssup?\",\"index\":\"11\",\"pos\":\"4\",\"time\":\"1256958752\"},\n{\"name\":\"user1\", \"color\":\"#11AFBA\",\"text\":\"nm\",\"index\":\"12\",\"pos\":\"1\",\"time\":\"1257958442\"}]\n\nthe color is adjusted as per the average sentiment\n*/\napp.get('/stream', function(req, res){\n    var last = req.param('last');\n    var arr = [];\n    for(var i in chat){\n        if(chat[i].index > last){\n            arr.push(chat[i]);\n        }\n    }\n    res.json(arr,200);\n});\n\n/*\nGET /sentiments\nparams:\nlast = the last index that was recieved from previous calls.\nif this is the first call, call with negative last\nreturns the sentiment stream\nexample output -\n[{\"pos\":\"4\",\"color\":\"#0D3233\", \"text\":\"keyword\",\"index\"=\"4\",\"amp\":4,\"time\":\"1256958752\"},{...}]\n\nthe color is adjusted as per sentiment score for each keyword\n*/\napp.get('/sentiments', function(req, res){\n    var last = req.param('last');\n    var arr = [];\n    for(var i in sentiment){\n        if(sentiment[i].index > last){\n            arr.push(sentiment[i]);\n        }\n    }\n    res.json(arr,200);\n});\n\n/*\nPOST /user\nparams:\nname = the user name of the user to add \ntheme = the color theme for the user \npos = the position of the user (see position in User.join)\n*/\napp.post('/user', function(req, res){\n    var name = req.param('name');\n    var theme = req.param('theme');\n    var pos = req.param('pos');\n    if(pos !== undefined && pos >= 0 && pos <= 3 &&\n       theme !== undefined && theme > 0 && theme <= 4 &&\n       name !== undefined && name.length > 0){\n        inUse = true;\n        table[pos].join(theme, name, pos);\n        res.send('',200);\n    }\n});\n\n/*\nDELETE /user\nparams:\npos = position of the user\n*/\napp.del('/user',function(req,res){\n    var pos = req.param('pos');\n    if(pos != undefined && pos >= 0 && pos <= 3){\n        table[pos].leave();\n        inUse = false;\n        for(var i in table){\n            if(table[i].isConversing){\n                inUse = true;\n                break;\n            }\n        }\n        if(!inUse){\n            reset();\n        }\n    }\n    res.send('',200);\n});\n\n/*\nPOST /chat\nparams:\npos = the position of the user\ntext = the stuff the user said\namp = amplitude (0-8. defaults to 4)\n*/\napp.post('/chat', function(req, res){\n    var pos = req.param('pos');\n    var text = req.param('text');\n    var amp = req.param('amp');\n    if(pos !== undefined && pos >= 0 && pos <=3 &&\n       text !== undefined && text.length > 0){\n        if (amp === undefined) {\n            amp = 4;\n        }\n        addChatLine(text,pos, amp);\n    }\n    res.send('',200);\n});\n\n/*\nGET postcircles \nThis is pretty much a terrible idea\nparams:\narr = [{'x':3,'y':4,'rad':5,'ang':'-1','chr':'a',col:'#2323ff'}, ...]\n*/\napp.get('/postcircles', function(req,res){\n    var arr = req.param('arr');\n    if(arr !== undefined){\n        console.log(arr);\n        circles = JSON.parse(arr);\n        res.send('',200);\n    }\n});\n\n/*\nGET /circles\n*/\napp.get('/circles', function(req, res){\n    res.json(circles,200);\n});\n\n/*\nGET /reset\nforcibly resets the conversation\n*/\napp.get('/reset', function(req, res){\n    reset();\n    res.send('',200);\n});\n\n/*\nPOST /swn\nparam:\nval : true or false\nfalse = use AlchemyAPI\ntrue = use SentiWordNet\n*/\napp.post('/swn',function(req,res){\n    var val = req.param('val');\n    if(val !== undefined){\n        swn = (val == 'true');\n    }\n});\n\n/*\nadds keywords to the sentiment stream\nalso adds chatObj to the chat stream after adjusting its color\n*/\nfunction addSentiment(text, pos, amp, chatObj){\n    if(sentiment.length == sentimentMax){\n        sentiment.pop();\n    }\n    getSentiments(text, function(keywords){\n        var avg = 0;\n        for (var i in keywords){\n            var color = getSentimentColor(col.theme.getColor(table[pos].theme),\n                                              parseFloat(keywords[i].sentiment));\n            var obj = {\n                \"pos\" : pos,\n                \"color\" : color,\n                \"text\" : keywords[i].text,\n                \"index\" : sentimentIndex,\n                \"amp\" : amp,\n                \"time\" : chatObj.time\n            };\n            sentimentIndex++;\n            sentiment.push(obj);\n            avg += parseFloat(keywords[i].sentiment);\n        }\n        if(keywords.length !== 0){\n            avg = avg / keywords.length;\n            //adjust color in chat\n            chatObj.color = getSentimentColor(chatObj.color,avg);\n        }\n        //add the chat object with the sentiment adjusted color\n        chatIndex++;\n        chat.push(chatObj);\n    });\n}\n\n/*\nadds text to the chat stream\nreturns the index where the last chat line was added\n*/\nfunction addChatLine(text, pos, amp){\n    if(chat.length == chatMax){\n        chat.pop();\n    }\n    var obj = {\n        \"pos\" : pos,\n        \"color\" : table[pos].color,\n        \"text\" : text,\n        \"index\" : chatIndex,\n        \"name\" : table[pos].name,\n        \"time\" : String(Math.round(new Date().getTime() / 1000))\n    };\n    addSentiment(text, pos, amp, obj);\n}\n\n/*\nextracts sentiment scores from the text\nuses AlchemyAPI by default. \nuses SentiWordNet if swn is true\n*/\nfunction getSentiments(text,callback){\n    if(swn){\n        getSentimentsFromSWN(text,callback);\n    }\n    else{\n        getSentimentsFromAlchemy(text,callback);\n    }\n}\n\n/*\nextracts sentiment score using AlchemyAPI\n*/\nfunction getSentimentsFromAlchemy(text, callback){\n    var apikey = '1e9868483244e57f2ddb61670c0b361ed2a2f204';\n    var alchemy = {\n        host: 'access.alchemyapi.com',\n        path: '/calls/text/TextGetRankedKeywords?apikey='+ apikey +\n              '&outputMode=json&maxRetrieve=5&sentiment=1&text=' +\n              encodeURIComponent(text)\n    };\n\n    http.get(alchemy, function(res){\n        var data = \"\";\n        res.on('data', function(chunk){\n            data+=chunk;\n        });\n        res.on('end', function(){\n            var dataobj = JSON.parse(data);\n            var keywords = [];\n            for(var i in dataobj.keywords){\n                var t = dataobj.keywords[i].text;\n                var s = 0;\n                if(dataobj.keywords[i].sentiment.type != 'neutral'){\n                    s = dataobj.keywords[i].sentiment.score;\n                }\n                keywords.push({\n                    'text': t,\n                    'sentiment' : s\n                });\n            }\n            callback(keywords);\n        });\n    });\n}\n\n/*\nextracts sentiment score using SentiWordNet\nthis function does absolutely nothing to select important keywords\nwhich may result in it generating a lot of keyword\n*/\nfunction getSentimentsFromSWN(text, callback){    \n    var sentiwordnet = {\n        host: 'www.tweetsichord.com',\n        path: '/sentiwordnet.php?q=' + encodeURIComponent(text)\n    };\n\n    http.get(sentiwordnet, function(res){\n        var data = \"\";\n        res.on('data', function(chunk){\n            data+=chunk;\n        });\n        res.on('end', function(){\n            var dataObj = JSON.parse(data);\n            callback(dataObj);\n        });\n    });\n}\n\n/*\ntakes a #rrbbgg color string, adjusts value in hsv space as per the score\nwhich is in a [-1,1] range\nand returns another color string\n*/\nfunction getSentimentColor(color, score){\n    //get the color\n    color = color.trim();\n\n    var r = parseInt(color.substring(1,3),16);\n    var g = parseInt(color.substring(3,5),16);\n    var b = parseInt(color.substring(5,7),16);\n    var hsv = col.rgbToHsv(r,g,b);\n    //change the value (hsv[2])\n    score += 1; //score is now in [0,2] range\n    hsv[2] = Math.round(40 + score*30);\n    var rgb = col.hsvToRgb(hsv[0],hsv[1],hsv[2]);\n    var str = '#';\n    for(var i in rgb){\n        var temp = rgb[i].toString(16);\n        if(temp.length == 1){\n            temp = '0'+temp;\n        }\n        str+=temp;\n    }\n    return str;\n}\n\n/*\nreset the conversation\n*/\nfunction reset(){\n    //remove all users\n    for(var i in table){\n        table[i].leave();\n    }\n    //reset chat\n    chat = [];\n    chatIndex = 0;\n    //reset  sentiment\n    sentiment = [];\n    sentimentIndex = 0;\n    //reset circles\n    circles = [];\n    \n    inUse = false;\n}\n\napp.listen(process.env.PORT);\n"]],"start1":0,"start2":0,"length1":0,"length2":9460}]],"length":9460,"saved":false}
{"contributors":[],"silentsave":false,"ts":1349896268132,"patch":[[{"diffs":[[-1,"\n//user\nvar usr = require('./user');\n"],[0,"//co"]],"start1":0,"start2":0,"length1":41,"length2":4},{"diffs":[[0,"');\n"],[-1,"//create a server\nvar express = require('express');\nvar app = express();\n//array of users\nvar users = [];\n\n//chat stream\nvar chat = [];\nvar chatIndex = 0;\nvar chatMax = 1000;\n\n//sentiment output stream\nvar sentiment = [];\nvar sentimentIndex = 0;\nvar sentimentMax = 5000;\n\n//circles\nvar circles = [];\n\nvar inUse = false;\n\n//sentiwordnet\nvar swn = false;\n\n/*\ndeliver index.html\n*/\napp.use(express.static(__dirname + '/chat'));\n\n/*\ndeliver test.html\n*/\napp.use('/test', express.static(__dirname + '/test'));\n\n/*\nGET /table \nreturns the current list of users on the table\nexample output - \n[{\"name\":\"user1\",\"color\":\"#11AFBA\",\"position\":\"0\",\"theme\":1},\n {\"name\":\"user2\",\"color\":\"#A82A2A\",\"position\":\"1\",\"theme\":3}, ...]\n*/\napp.get('/table', function(req, res){\n    var arr = [];\n    for(var i in table){\n        var obj = table[i].getData();\n        if(obj !== null){\n            if(obj.position < 0){\n                obj.position = i;\n            }\n            arr.push(obj);\n        } \n    }\n    res.json(arr,200);\n});\n\n/*\nGET /stream\nparams:\nlast = the last index that was recieved from previous calls.\nif this is the first call, call with negative last\nreturns the chat stream\nexample output - \n[{\"name\":\"user1\", \"color\":\"#11AFBA\",\"text\":\"Hi\",\"index\":\"10\",\"pos\":\"1\",\"time\":\"1256953732\"},\n{\"name\":\"user2\", \"color\":\"#A82A2A\",\"text\":\"ssup?\",\"index\":\"11\",\"pos\":\"4\",\"time\":\"1256958752\"},\n{\"name\":\"user1\", \"color\":\"#11AFBA\",\"text\":\"nm\",\"index\":\"12\",\"pos\":\"1\",\"time\":\"1257958442\"}]\n\nthe color is adjusted as per the average sentiment\n*/\napp.get('/stream', function(req, res){\n    var last = req.param('last');\n    var arr = [];\n    for(var i in chat){\n        if(chat[i].index > last){\n            arr.push(chat[i]);\n        }\n    }\n    res.json(arr,200);\n});\n\n/*\nGET /sentiments\nparams:\nlast = the last index that was recieved from previous calls.\nif this is the first call, call with negative last\nreturns the sentiment stream\nexample output -\n[{\"pos\":\"4\",\"color\":\"#0D3233\", \"text\":\"keyword\",\"index\"=\"4\",\"amp\":4,\"time\":\"1256958752\"},{...}]\n\nthe color is adjusted as per sentiment score for each keyword\n*/\napp.get('/sentiments', function(req, res){\n    var last = req.param('last');\n    var arr = [];\n    for(var i in sentiment){\n        if(sentiment[i].index > last){\n            arr.push(sentiment[i]);\n        }\n    }\n    res.json(arr,200);\n});\n\n/*\nPOST /user\nparams:\nname = the user name of the user to add \ntheme = the color theme for the user \npos = the position of the user (see position in User.join)\n*/\napp.post('/user', function(req, res){\n    var name = req.param('name');\n    var theme = req.param('theme');\n    var pos = req.param('pos');\n    if(pos !== undefined && pos >= 0 && pos <= 3 &&\n       theme !== undefined && theme > 0 && theme <= 4 &&\n       name !== undefined && name.length > 0){\n        inUse = true;\n        table[pos].join(theme, name, pos);\n        res.send('',200);\n    }\n});\n\n/*\nDELETE /user\nparams:\npos = position of the user\n*/\napp.del('/user',function(req,res){\n    var pos = req.param('pos');\n    if(pos != undefined && pos >= 0 && pos <= 3){\n        table[pos].leave();\n        inUse = false;\n        for(var i in table){\n            if(table[i].isConversing){\n                inUse = true;\n                break;\n            }\n        }\n        if(!inUse){\n            reset();\n        }\n    }\n    res.send('',200);\n});\n\n/*\nPOST /chat\nparams:\npos = the position of the user\ntext = the stuff the user said\namp = amplitude (0-8. defaults to 4)\n*/\napp.post('/chat', function(req, res){\n    var pos = req.param('pos');\n    var text = req.param('text');\n    var amp = req.param('amp');\n    if(pos !== undefined && pos >= 0 && pos <=3 &&\n       text !== undefined && text.length > 0){\n        if (amp === undefined) {\n            amp = 4;\n        }\n        addChatLine(text,pos, amp);\n    }\n    res.send('',200);\n});\n\n/*\nGET postcircles \nThis is pretty much a terrible idea\nparams:\narr = [{'x':3,'y':4,'rad':5,'ang':'-1','chr':'a',col:'#2323ff'}, ...]\n*/\napp.get('/postcircles', function(req,res){\n    var arr = req.param('arr');\n    if(arr !== undefined){\n        console.log(arr);\n        circles = JSON.parse(arr);\n        res.send('',200);\n    }\n});\n\n/*\nGET /circles\n*/\napp.get('/circles', function(req, res){\n    res.json(circles,200);\n});\n\n/*\nGET /reset\nforcibly resets the conversation\n*/\napp.get('/reset', function(req, res){\n    reset();\n    res.send('',200);\n});\n\n/*\nPOST /swn\nparam:\nval : true or false\nfalse = use AlchemyAPI\ntrue = use SentiWordNet\n*/\napp.post('/swn',function(req,res){\n    var val = req.param('val');\n    if(val !== undefined){\n        swn = (val == 'true');\n    }\n});\n\n/*\nadds keywords to the sentiment stream\nalso adds chatObj to the chat stream after adjusting its color\n*/\nfunction addSentiment(text, pos, amp, chatObj){\n    if(sentiment.length == sentimentMax){\n        sentiment.pop();\n    }\n    getSentiments(text, function(keywords){\n        var avg = 0;\n        for (var i in keywords){\n            var color = getSentimentColor(col.theme.getColor(table[pos].theme),\n                                              parseFloat(keywords[i].sentiment));\n            var obj = {\n                \"pos\" : pos,\n                \"color\" : color,\n                \"text\" : keywords[i].text,\n                \"index\" : sentimentIndex,\n                \"amp\" : amp,\n                \"time\" : chatObj.time\n            };\n            sentimentIndex++;\n            sentiment.push(obj);\n            avg += parseFloat(keywords[i].sentiment);\n        }\n        if(keywords.length !== 0){\n            avg = avg / keywords.length;\n            //adjust color in chat\n            chatObj.color = getSentimentColor(chatObj.color,avg);\n        }\n        //add the chat object with the sentiment adjusted color\n        chatIndex++;\n        chat.push(chatObj);\n    });\n}\n\n/*\nadds text to the chat stream\nreturns the index where the last chat line was added\n*/\nfunction addChatLine(text, pos, amp){\n    if(chat.length == chatMax){\n        chat.pop();\n    }\n    var obj = {\n        \"pos\" : pos,\n        \"color\" : table[pos].color,\n        \"text\" : text,\n        \"index\" : chatIndex,\n        \"name\" : table[pos].name,\n        \"time\" : String(Math.round(new Date().getTime() / 1000))\n    };\n    addSentiment(text, pos, amp, obj);\n}\n\n/*\nextracts sentiment scores from the text\nuses AlchemyAPI by default. \nuses SentiWordNet if swn is true\n*/\nfunction getSentiments(text,callback){\n    if(swn){\n        getSentimentsFromSWN(text,callback);\n    }\n    else{\n        getSentimentsFromAlchemy(text,callback);\n    }\n}\n\n/*\nextracts sentiment score using AlchemyAPI\n*/\nfunction getSentimentsFromAlchemy(text, callback){\n    var apikey = '1e9868483244e57f2ddb61670c0b361ed2a2f204';\n    var alchemy = {\n        host: 'access.alchemyapi.com',\n        path: '/calls/text/TextGetRankedKeywords?apikey='+ apikey +\n              '&outputMode=json&maxRetrieve=5&sentiment=1&text=' +\n              encodeURIComponent(text)\n    };\n\n    http.get(alchemy, function(res){\n        var data = \"\";\n        res.on('data', function(chunk){\n            data+=chunk;\n        });\n        res.on('end', function(){\n            var dataobj = JSON.parse(data);\n            var keywords = [];\n            for(var i in dataobj.keywords){\n                var t = dataobj.keywords[i].text;\n                var s = 0;\n                if(dataobj.keywords[i].sentiment.type != 'neutral'){\n                    s = dataobj.keywords[i].sentiment.score;\n                }\n                keywords.push({\n                    'text': t,\n                    'sentiment' : s\n                });\n            }\n            callback(keywords);\n        });\n    });\n}\n\n/*\nextracts sentiment score using SentiWordNet\nthis function does absolutely nothing to select important keywords\nwhich may result in it generating a lot of keyword\n*/\nfunction getSentimentsFromSWN(text, callback){    \n    var sentiwordnet = {\n        host: 'www.tweetsichord.com',\n        path: '/sentiwordnet.php?q=' + encodeURIComponent(text)\n    };\n\n    http.get(sentiwordnet, function(res){\n        var data = \"\";\n        res.on('data', function(chunk){\n            data+=chunk;\n        });\n        res.on('end', function(){\n            var dataObj = JSON.parse(data);\n            callback(dataObj);\n        });\n    });\n}\n\n/*\ntakes a #rrbbgg color string, adjusts value in hsv space as per the score\nwhich is in a [-1,1] range\nand returns another color string\n*/\nfunction getSentimentColor(color, score){\n    //get the color\n    color = color.trim();\n\n    var r = parseInt(color.substring(1,3),16);\n    var g = parseInt(color.substring(3,5),16);\n    var b = parseInt(color.substring(5,7),16);\n    var hsv = col.rgbToHsv(r,g,b);\n    //change the value (hsv[2])\n    score += 1; //score is now in [0,2] range\n    hsv[2] = Math.round(40 + score*30);\n    var rgb = col.hsvToRgb(hsv[0],hsv[1],hsv[2]);\n    var str = '#';\n    for(var i in rgb){\n        var temp = rgb[i].toString(16);\n        if(temp.length == 1){\n            temp = '0'+temp;\n        }\n        str+=temp;\n    }\n    return str;\n}\n\n/*\nreset the conversation\n*/\nfunction reset(){\n    //remove all users\n    for(var i in table){\n        table[i].leave();\n    }\n    //reset chat\n    chat = [];\n    chatIndex = 0;\n    //reset  sentiment\n    sentiment = [];\n    sentimentIndex = 0;\n    //reset circles\n    circles = [];\n    \n    inUse = false;\n}\n\napp.listen(process.env.PORT);\n\n//user\nvar usr = require('./user');\n//colors\nvar col = require('./colors');\n//http object\nvar http = require('http');\n//create a server\nvar express = require('express');\nvar app = express.createServer();\n//array of users - we support at most 4 users at a time\nvar table = [new usr.User(),new usr.User(),new usr.User(),new usr.User()];\n//chat stream\nvar chat = [];\nvar chatIndex = 0;\nvar chatMax = 1000;\n\n//sentiment output stream\nvar sentiment = [];\nvar sentimentIndex = 0;\nvar sentimentMax = 5000;\n\n//circles\nvar circles = [];\n\nvar inUse = false;\n\n//sentiwordnet\nvar swn = false;\n\n/*\ndeliver index.html\n*/\napp.use(express.static(__dirname + '/chat'));\n\n/*\ndeliver test.html\n*/\napp.use('/test', express.static(__dirname + '/test'));\n\n/*\nGET /table \nreturns the current list of users on the table\nexample output - \n[{\"name\":\"user1\",\"color\":\"#11AFBA\",\"position\":\"0\",\"theme\":1},\n {\"name\":\"user2\",\"color\":\"#A82A2A\",\"position\":\"1\",\"theme\":3}, ...]\n*/\napp.get('/table', function(req, res){\n    var arr = [];\n    for(var i in table){\n        var obj = table[i].getData();\n        if(obj !== null){\n            if(obj.position < 0){\n                obj.position = i;\n            }\n            arr.push(obj);\n        } \n    }\n    res.json(arr,200);\n});\n\n/*\nGET /stream\nparams:\nlast = the last index that was recieved from previous calls.\nif this is the first call, call with negative last\nreturns the chat stream\nexample output - \n[{\"name\":\"user1\", \"color\":\"#11AFBA\",\"text\":\"Hi\",\"index\":\"10\",\"pos\":\"1\",\"time\":\"1256953732\"},\n{\"name\":\"user2\", \"color\":\"#A82A2A\",\"text\":\"ssup?\",\"index\":\"11\",\"pos\":\"4\",\"time\":\"1256958752\"},\n{\"name\":\"user1\", \"color\":\"#11AFBA\",\"text\":\"nm\",\"index\":\"12\",\"pos\":\"1\",\"time\":\"1257958442\"}]\n\nthe color is adjusted as per the average sentiment\n*/\napp.get('/stream', function(req, res){\n    var last = req.param('last');\n    var arr = [];\n    for(var i in chat){\n        if(chat[i].index > last){\n            arr.push(chat[i]);\n        }\n    }\n    res.json(arr,200);\n});\n\n/*\nGET /sentiments\nparams:\nlast = the last index that was recieved from previous calls.\nif this is the first call, call with negative last\nreturns the sentiment stream\nexample output -\n[{\"pos\":\"4\",\"color\":\"#0D3233\", \"text\":\"keyword\",\"index\"=\"4\",\"amp\":4},{...}]\n\nthe color is adjusted as per sentiment score for each keyword\n*/\napp.get('/sentiments', function(req, res){\n    var last = req.param('last');\n    var arr = [];\n    for(var i in sentiment){\n        if(sentiment[i].index > last){\n            arr.push(sentiment[i]);\n        }\n    }\n    res.json(arr,200);\n});\n\n/*\nPOST /user\nparams:\nname = the user name of the user to add \ntheme = the color theme for the user \npos = the position of the user (see position in User.join)\n*/\napp.post('/user', function(req, res){\n    var name = req.param('name');\n    var theme = req.param('theme');\n    var pos = req.param('pos');\n    if(pos != undefined && pos >= 0 && pos <= 3 &&\n       theme !== undefined && theme > 0 && theme <= 4 &&\n       name !== undefined && name.length > 0){\n        inUse = true;\n        table[pos].join(theme, name, pos);\n        res.send('',200);\n    }"],[1,"var colors = col.colors();\n//Sentimental\nvar analyze = require('sentimental').analyze;\n//create a server\nvar express = require('express');\nvar app = express();\n\n//array users\nvar users = [];\n//id to be issued to next user \nvar nextId = 0;\n\n//chat stream\nvar chat = [];\nvar chatIndex = 0;\nvar chatMax = 5000;\n\n/*\ndeliver index.html\n*/\napp.use(express.static(__dirname + '/chat'));\n\n/*\ndeliver hangout gadget xml\n*/\napp.use('/xml', express.static(__dirname + '/hangout/convsent.xml'));\n\n/*\nGET /users\nreturns the current list of users \nexample output - \n[{\"name\":\"user1\",\"color\":\"#11AFBA\"},\n {\"name\":\"user2\",\"color\":\"#A82A2A\"}, ...]\n\ncolor is the base color of the user\nindex in the array is the id\nusers who have left the conversation will be undefined\n*/\napp.get('/users', function(req, res){\n    res.json(users,200);\n});\n\n/*\nGET /stream\nparams:\nlast = the last index that was recieved from previous calls.\nif this is the first call, call with negative last\nreturns the chat stream\nexample output - \n[{\"name\":\"user1\", \"id\":1, \"color\":\"#11AFBA\",\"text\":\"Hi\",\"index\":\"10\",\n  \"time\":\"1256953732\", \"sentiment\":{...}}, ...]\n\nthe sentiment object is as returned by Sentimental.analyze()\nthe color is adjusted as per the average sentiment\n*/\napp.get('/stream', function(req, res){\n    var last = req.param('last');\n    var arr = [];\n    for(var i in chat){\n        if(chat[i].index > last){\n            arr.push(chat[i]);\n        }\n    }\n    res.json(arr,200);\n});\n\n/*\nPOST /user\nparams:\nname = the user name of the user to add\nreturns a unique id for this user;\nexample output\n{\"id\":1}\n*/\napp.post('/user', function(req, res){\n    var name = req.param('name');\n    if(name !== undefined && name.length > 0){\n        var color = colors.getColor();\n        users[nextId] = {\"name\": name, \"color\": color};\n        var ret = {\"id\": nextId};\n        nextId++;\n        res.json(ret, 200);\n    }\n    res.send('',400);"],[0,"\n});"]],"start1":36,"start2":36,"length1":12497,"length2":1911},{"diffs":[[0,"ms:\n"],[-1,"pos = position"],[1,"id = id"],[0," of "]],"start1":1969,"start2":1969,"length1":22,"length2":15},{"diffs":[[0,"var "],[-1,"pos = req.param('pos');\n    if(pos != undefined && pos >= 0 && pos <= 3){\n        table[pos].leave();\n        inUse = false;\n        for(var i in table){\n            if(table[i].isConversing){\n                inUse = true;\n                break;\n            }\n        }\n        if(!inUse){\n            reset();\n        }\n    }\n    res.send('',200);\n});\n\n/*\nPOST /chat\nparams:\npos = the position"],[1,"id = req.param('id');\n    if(id != undefined && id >= 0 && id < nextId){\n        users[id] = undefined;\n        res.send('',200);\n    }\n    res.send('',400);\n});\n\n/*\nPOST /chat\nparams:\nid = the id"],[0," of "]],"start1":2035,"start2":2035,"length1":402,"length2":204},{"diffs":[[0,"    var "],[-1,"pos"],[1,"id"],[0," = req.p"]],"start1":2357,"start2":2357,"length1":19,"length2":18},{"diffs":[[0,".param('"],[-1,"pos"],[1,"id"],[0,"');\n    "]],"start1":2373,"start2":2373,"length1":19,"length2":18},{"diffs":[[0," if("],[-1,"pos !== undefined && pos >= 0 && pos <=3"],[1,"id !== undefined && id >= 0 && id < nextId && users[id] !== undefined"],[0," &&\n"]],"start1":2456,"start2":2456,"length1":48,"length2":77},{"diffs":[[0,"ext,"],[-1,"pos, amp);\n    }\n    res.send('',200);\n});\n\n/*\nGET postcircles \nThis is pretty much a terrible idea\nparams:\narr = [{'x':3,'y':4,'rad':5,'ang':'-1','chr':'a',col:'#2323ff'}, ...]\n*/\napp.get('/postcircles', function(req,res){\n    var arr = req.param('arr');\n    if(arr !== undefined){\n        console.log(arr);\n        circles = JSON.parse(arr);\n        res.send('',200);\n    }\n});\n\n/*\nGET /circles\n*/\napp.get('/circles', function(req, res){\n    res.json(circles,200);\n});\n\n/*\nGET /reset\nforcibly resets the conversation\n*/\napp.get('/reset', function(req, res){\n    reset();\n    res.send('',200);\n});\n\n/*\nPOST /swn\nparam:\nval : true or false\nfalse = use AlchemyAPI\ntrue = use SentiWordNet\n*/\napp.post('/swn',function(req,res){\n    var val = req.param('val');\n    if(val !== undefined){\n        swn = (val == 'true');\n    }\n});\n\n/*\nadds keywords to the sentiment stream\nalso adds chatObj to the chat stream after adjusting its color\n*/\nfunction addSentiment(text, pos, amp, chatObj){\n    if(sentiment.length == sentimentMax){\n        sentiment.pop();\n    }\n    getSentiments(text, function(keywords){\n        var avg = 0;\n        for (var i in keywords){\n            var color = getSentimentColor(col.theme.getColor(table[pos].theme),\n                                              parseFloat(keywords[i].sentiment));\n            var obj = {\n                \"pos\" : pos,\n                \"color\" : color,\n                \"text\" : keywords[i].text,\n                \"index\" : sentimentIndex,\n                \"amp\" : amp\n            };\n            sentimentIndex++;\n            sentiment.push(obj);\n            avg += parseFloat(keywords[i].sentiment);\n        }\n        if(keywords.length != 0){\n            avg = avg / keywords.length;\n            //adjust color in chat\n            chatObj.color = getSentimentColor(chatObj.color,avg);\n        }\n        //add the chat object with the sentiment adjusted color\n        chatIndex++;\n        chat.push(chatObj);\n    });\n}"],[1,"id, amp);\n        res.send('',200);\n    }\n    res.send('',400);\n});\n\n/*\nGET /reset\nforcibly resets the conversation\n*/\napp.get('/reset', function(req, res){\n    reset();\n    res.send('',200);\n});"],[0,"\n\n/*"]],"start1":2665,"start2":2665,"length1":1971,"length2":203},{"diffs":[[0,"tLine(text, "],[-1,"pos"],[1,"id"],[0,", amp){\n    "]],"start1":2969,"start2":2969,"length1":27,"length2":26},{"diffs":[[0,"var "],[-1,"obj = {\n        \"pos\" : pos,\n        \"color\" : table[pos].color,\n        \"text\" : text,\n        \"index\" : chatIndex,\n        \"name\" : table[pos].name,\n        \"time\" : String(Math.round(new Date().getTime() / 1000))\n    };\n    addSentiment(text, pos, amp, obj);\n}\n\n/*\nextracts sentiment scores from the text\nuses AlchemyAPI by default. \nuses SentiWordNet if swn is true\n*/\nfunction getSentiments(text,callback){\n    if(swn){\n        getSentimentsFromSWN(text,callback);\n    }\n    else{\n        getSentimentsFromAlchemy(text,callback);\n    }\n}\n\n/*\nextracts sentiment score using AlchemyAPI\n*/\nfunction getSentimentsFromAlchemy(text, callback){\n    var apikey = '1e9868483244e57f2ddb61670c0b361ed2a2f204';\n    var alchemy = {\n        host: 'access.alchemyapi.com',\n        path: '/calls/text/TextGetRankedKeywords?apikey='+ apikey +\n              '&outputMode=json&maxRetrieve=5&sentiment=1&text=' +\n              encodeURIComponent(text)\n    };\n\n    http.get(alchemy, function(res){\n        var data = \"\";\n        res.on('data', function(chunk){\n            data+=chunk;\n        });\n        res.on('end', function(){\n            var dataobj = JSON.parse(data);\n            var keywords = [];\n            for(var i in dataobj.keywords){\n                var t = dataobj.keywords[i].text;\n                var s = 0;\n                if(dataobj.keywords[i].sentiment.type != 'neutral'){\n                    s = dataobj.keywords[i].sentiment.score;\n                }\n                keywords.push({\n                    'text': t,\n                    'sentiment' : s\n                });\n            }\n            callback(keywords);\n        });\n    });\n}\n\n/*\nextracts sentiment score using SentiWordNet\nthis function does absolutely nothing to select important keywords\nwhich may result in it generating a lot of keyword\n*/\nfunction getSentimentsFromSWN(text, callback){    \n    var sentiwordnet = {\n        host: 'www.tweetsichord.com',\n        path: '/sentiwordnet.php?q=' + encodeURIComponent(text)\n    };\n\n    http.get(sentiwordnet, function(res){\n        var data = \"\";\n        res.on('data', function(chunk){\n            data+=chunk;\n        });\n        res.on('end', function(){\n            var dataObj = JSON.parse(data);\n            callback(dataObj);\n        });\n    })"],[1,"sentiment = analyze(text);\n    var obj = {\n        \"id\" : id,\n        \"text\" : text,\n        \"index\" : chatIndex,\n        \"name\" : users[id].name,\n        \"time\" : String(Math.round(new Date().getTime() / 1000)),\n        \"sentiment\": sentiment,\n        \"color\" : getSentimentColor(users[id].color, sentiment.score)\n    }"],[0,";\n}\n"]],"start1":3053,"start2":3053,"length1":2279,"length2":328},{"diffs":[[0,"a [-"],[-1,"1,1"],[1,"5,5"],[0,"] ra"]],"start1":3471,"start2":3471,"length1":11,"length2":11},{"diffs":[[0,"hsv[2])\n"],[1,"    score /= 5; //score is now in [-1,1] range\n"],[0,"    scor"]],"start1":3811,"start2":3811,"length1":16,"length2":63},{"diffs":[[0,"    "],[-1,"for(var i in table){\n        table[i].leave();\n    }\n    //reset chat\n    chat = [];\n    chatIndex = 0;\n    //reset  sentiment\n    sentiment = [];\n    sentimentIndex = 0;\n    //reset circles\n    circles = [];\n    \n    inUse = false"],[1,"users = [];\n    //reset chat\n    chat = [];\n    chatIndex = 0"],[0,";\n}\n"]],"start1":4267,"start2":4267,"length1":239,"length2":69}]],"length":4367,"saved":false}
{"ts":1349896327627,"patch":[[{"diffs":[[0,"equire('"],[-1,"s"],[1,"S"],[0,"entiment"]],"start1":96,"start2":96,"length1":17,"length2":17}]],"length":4367,"saved":false}
{"ts":1349896904729,"patch":[[{"diffs":[[0,"r app = "],[1,"express."],[0,"express("]],"start1":181,"start2":181,"length1":16,"length2":24}]],"length":4375,"saved":false}
{"ts":1349896965312,"patch":[[{"diffs":[[0,"r app = "],[-1,"express."],[0,"express("]],"start1":181,"start2":181,"length1":24,"length2":16}]],"length":4367,"saved":false}
{"ts":1349897882479,"patch":[[{"diffs":[[0,"convsent"],[1,"app"],[0,".xml'));"]],"start1":507,"start2":507,"length1":16,"length2":19}]],"length":4370,"saved":false}
{"ts":1349898338374,"patch":[[{"diffs":[[0,"p.use('/"],[-1,"xml"],[1,"hangout"],[0,"', expre"]],"start1":456,"start2":456,"length1":19,"length2":23}]],"length":4374,"saved":false}
{"contributors":[],"silentsave":false,"ts":1350165730429,"patch":[[{"diffs":[[0,"app.use("],[1,"'/', "],[0,"express."]],"start1":374,"start2":374,"length1":16,"length2":21}]],"length":4379,"saved":false}
{"ts":1350165745565,"patch":[[{"diffs":[[0,"+ '/chat"],[1,"/index.html"],[0,"'));\n\n/*"]],"start1":412,"start2":412,"length1":16,"length2":27}]],"length":4390,"saved":false}
{"ts":1350166078736,"patch":[[{"diffs":[[0,"p.use('/"],[1,"chat"],[0,"', expre"]],"start1":376,"start2":376,"length1":16,"length2":20},{"diffs":[[0,"chat"],[-1,"/index.html"],[0,"'));"]],"start1":420,"start2":420,"length1":19,"length2":8},{"diffs":[[0,"gout"],[-1,"/convsentapp.xml"],[0,"'));"]],"start1":515,"start2":515,"length1":24,"length2":8}]],"length":4367,"saved":false}
{"ts":1350166093723,"patch":[[{"diffs":[[0,"app.use("],[-1,"'/chat', "],[0,"express."]],"start1":374,"start2":374,"length1":25,"length2":16}]],"length":4358,"saved":false}
{"contributors":[],"silentsave":false,"ts":1350245024265,"patch":[[{"diffs":[[0,");\n\n"],[-1,"//array users\nvar users = [];\n//id to be issued to next user \nvar nextId = 0;\n\n//chat stream\nvar chat = [];\nvar chatIndex = 0;\nvar chatMax = 5000;\n\n"],[0,"/*\nd"]],"start1":197,"start2":197,"length1":156,"length2":8},{"diffs":[[0,");\n\n"],[-1,"/*\nGET /users\nreturns the current list of users \nexample output - \n[{\"name\":\"user1\",\"color\":\"#11AFBA\"},\n {\"name\":\"user2\",\"color\":\"#A82A2A\"}, ...]\n\ncolor is the base color of the user\nindex in the array is the id\nusers who have left the conversation will be undefined\n*/\napp.get('/users', function(req, res){\n    res.json(users,200);\n});\n\n/*\nGET /stream\nparams:\nlast = the last index that was recieved from previous calls.\nif this is the first call, call with negative last\nreturns the chat stream\nexample output - \n[{\"name\":\"user1\", \"id\":1, \"color\":\"#11AFBA\",\"text\":\"Hi\",\"index\":\"10\",\n  \"time\":\"1256953732\", \"sentiment\":{...}}, ...]\n\nthe sentiment object is as returned by Sentimental.analyze()\nthe color is adjusted as per the average sentiment\n*/\napp.get('/stream', function(req, res){\n    var last = req.param('last');\n    var arr = [];\n    for(var i in chat){\n        if(chat[i].index > last){\n            arr.push(chat[i]);\n        }\n    }\n    res.json(arr,200);\n});\n\n/*\nPOST /user\nparams:\nname = the user name of the user to add\nreturns a unique id for this user;\nexample output\n{\"id\":1}\n*/\napp.post('/user', function(req, res){\n    var name = req.param('name');\n    if(name !== undefined && name.length > 0){\n        var color = colors.getColor();\n        users[nextId] = {\"name\": name, \"color\": color};\n        var ret = {\"id\": nextId};\n        nextId++;\n        res.json(ret, 200);\n    }\n    res.send('',400);\n});\n\n/*\nDELETE /user\nparams:\nid = id of the user\n*/\napp.del('/user',function(req,res){\n    var id = req.param('id');\n    if(id != undefined && id >= 0 && id < nextId){\n        users[id] = undefined;\n        res.send('',200);\n    }\n    res.send('',400);\n});\n\n/*\nPOST /chat\nparams:\nid = the id of the user\ntext = the stuff the user said\namp = amplitude (0-8. defaults to 4)\n*/\napp.post('/chat', function(req, res){\n    var id = req.param('id');\n    var text = req.param('text');\n    var amp = req.param('amp');\n    if(id !== undefined && id >= 0 && id < nextId && users[id] !== undefined &&\n       text !== undefined && text.length > 0){\n        if (amp === undefined) {\n            amp = 4;\n        }\n        addChatLine(text,id, amp);\n        res.send('',200);\n    }\n    res.send('',400);\n});\n\n/*\nGET /reset\nforcibly resets the conversation\n*/\napp.get('/reset', function(req, res){\n    reset();\n    res.send('',200);\n});\n\n/*\nadds text to the chat stream\nreturns the index where the last chat line was added\n*/\nfunction addChatLine(text, id, amp){\n    if(chat.length == chatMax){\n        chat.pop();\n    }\n    var sentiment = analyze(text);\n    var obj = {\n        \"id\" : id,\n        \"text\" : text,\n        \"index\" : chatIndex,\n        \"name\" : users[id].name,\n        \"time\" : String(Math.round(new Date().getTime() / 1000)),\n        \"sentiment\": sentiment,\n        \"color\" : getSentimentColor(users[id].color, sentiment.score)\n    };\n}\n\n/*\ntakes a #rrbbgg color string, adjusts value in hsv space as per the score\nwhich is in a [-5,5] range\nand returns another color string\n*/\nfunction getSentimentColor(color, score){\n    //get the color\n    color = color.trim();\n\n    var r = parseInt(color.substring(1,3),16);\n    var g = parseInt(color.substring(3,5),16);\n    var b = parseInt(color.substring(5,7),16);\n    var hsv = col.rgbToHsv(r,g,b);\n    //change the value (hsv[2])\n    score /= 5; //score is now in [-1,1] range\n    score += 1; //score is now in [0,2] range\n    hsv[2] = Math.round(40 + score*30);\n    var rgb = col.hsvToRgb(hsv[0],hsv[1],hsv[2]);\n    var str = '#';\n    for(var i in rgb){\n        var temp = rgb[i].toString(16);\n        if(temp.length == 1){\n            temp = '0'+temp;\n        }\n        str+=temp;\n    }\n    return str;\n}\n\n/*\nreset the conversation\n*/\nfunction reset(){\n    //remove all users\n    users = [];\n    //reset chat\n    chat = [];\n    chatIndex = 0;\n}\n\n"],[0,"app."]],"start1":364,"start2":364,"length1":3820,"length2":8}]],"length":398,"saved":false}
{"ts":1350245251955,"patch":[[{"diffs":[[0,");\n\n"],[-1,"/*\ndeliver index.html\n*/\napp.use(express.static(__dirname + '/chat'));\n\n"],[0,"/*\nd"]],"start1":197,"start2":197,"length1":80,"length2":8}]],"length":326,"saved":false}
{"ts":1350245423666,"patch":[[{"diffs":[[0,"ame + '/"],[-1,"hangout"],[1,"static"],[0,"'));\n\nap"]],"start1":275,"start2":275,"length1":23,"length2":22}]],"length":325,"saved":false}
{"ts":1350245444178,"patch":[[{"diffs":[[0,"\n/*\n"],[-1,"deliver hangout gadget xml\n*/\napp.use('/hangout', "],[1,"mount static content at /\n*/\napp.use("],[0,"expr"]],"start1":200,"start2":200,"length1":58,"length2":45}]],"length":312,"saved":false}
{"contributors":[],"silentsave":false,"ts":1350250642376,"patch":[[{"diffs":[[1,"//colors\nvar col = require('./colors');\nvar colors = col.colors();\n//Sentimental\nvar analyze = require('Sentimental').analyze;\n//create a server\nvar express = require('express');\nvar app = express();\n\n// Data Buffer\nvar dataBuffer = [];\n\n// map of participants\nvar participants = {};\n\n/*\nmount static content at /\n*/\napp.use(express.static(__dirname + '/static'));\n\n/*\nPOST /user\nparams:\nid = id given by gapi.hangout.getLocalParticipantId()\n*/\napp.post('/user', function(req, res){\n    var id = req.param('id');\n    if (id !== undefined && id.length > 0){\n        var color = colors.getColor(id);\n        res.send('', 200);\n    } else {\n      res.send('', 400)\n    }\n});\n\napp.listen(process.env.PORT);\n"]],"start1":0,"start2":0,"length1":0,"length2":703}]],"length":703,"saved":false}
{"contributors":[],"silentsave":false,"ts":1350254384544,"patch":[[{"diffs":[[0,"antId()\n"],[1,"name = participant's display name\n"],[0,"*/\napp.p"]],"start1":434,"start2":434,"length1":16,"length2":50},{"diffs":[[0,", res){\n"],[-1,"  "],[0,"  var id"]],"start1":509,"start2":509,"length1":18,"length2":16},{"diffs":[[0,";\n  "],[-1,"  if (id !== undefined && id.length > 0){\n        var color = colors.getColor(id);\n        res.send('', 200);\n    } else {\n      res.send('', 400)\n    }\n});"],[1,"var name = req.param('name');\n  if (id !== undefined && name !== undefined){\n    var h = colors.getColor(id);\n    participants[id] = {'h': h, 's': 100, 'l': 50 ,'name': name};\n    res.send(200);\n  } else {\n    res.send(400);\n  }\n});\n\n/*\n  GET /users\n  returns all users currently in the conversation\n*/\napp.get('/users', function(req, res) {\n  res.json(200, participants);\n});\n\n/*\n  DELETE /user\n  params:\n  id = id given by gapi.hangout.getLocalParticipantId()\n*/\napp.delete('/user', function(req, res) {\n  var id = req.param('id');\n  if (id !== undefined) {\n    colors.remove(id);\n    delete participants[id];\n  } else {\n    res.send(400);\n  }\n});\n\n/*\n  POST /data\n  params:\n  text: the text content of the message\n  id: the id of the participants\n  duration: duration in seconds of the message\n  amplitude: amplitude of the recording in a (0,10] range\n*/\napp.post('/user', function(req, res){\n  var id = req.param('id');\n  var text = req.param('text');\n  var duration = parseInt(req.param('duration'),10);\n  var amplitude = parseInt(req.param('amplitude'),10);\n  if (id !== undefined && name !== undefined && duration !== undefined &&\n      duration > 0 && amplitude !== undefined && amplitude > 0 &&\n      amplitude <= 10){\n    var analysis = analyze(text);\n    var dataObj = {\n      'id': id,\n      'text': text,\n      'duration': duration,\n      'amplitude': amplitude,\n      'score' : analysis,\n      'h' : participants[id].h,\n      's' : participants[id].s,\n      // converts [-5,5] sentiment score range to [20, 80] lightness values\n      'l' : 20 + ((parseInt(analysis.score,10) + 5) * 60)\n    }\n  } else {\n    res.send(400);\n  }\n});\n"],[0,"\n\nap"]],"start1":543,"start2":543,"length1":164,"length2":1652}]],"length":2223,"saved":false}
{"ts":1350254744821,"patch":[[{"diffs":[[0,"}\n  "],[-1,"} else {\n    res.send(400);\n  }\n});\n"],[1,"  dataBuffer.push(dataObj);\n    res.send(200);\n  } else {\n    res.send(400);\n  }\n});\n\n/*\n  GET /data\n  returns dataBuffer\n*/\napp.get('/data', function(req, res) {\n  res.json(200, dataBuffer);\n});\n\n/*\n  GET /reset\n  resets the server\n*/\napp.get('/reset', function(req, res){\n  dataBuffer = [];\n  participants = [];\n  colors = col.colors();\n});"],[0,"\n\nap"]],"start1":2151,"start2":2151,"length1":44,"length2":350}]],"length":2529,"saved":false}
{"ts":1350257609370,"patch":[[{"diffs":[[0,"] range\n"],[1,"  topic: current hangout topic\n"],[0,"*/\napp.p"]],"start1":1394,"start2":1394,"length1":16,"length2":47},{"diffs":[[0,"'),10);\n"],[1,"  var topic = req.param('topic');\n"],[0,"  if (id"]],"start1":1634,"start2":1634,"length1":16,"length2":50},{"diffs":[[0,"litude,\n"],[1,"      'topic': topic,\n"],[0,"      's"]],"start1":1980,"start2":1980,"length1":16,"length2":38}]],"length":2616,"saved":false}
{"ts":1350257661454,"patch":[[{"diffs":[[0,"/\napp.de"],[-1,"lete"],[0,"('/user'"]],"start1":1010,"start2":1010,"length1":20,"length2":16}]],"length":2612,"saved":false}
{"ts":1350257662683,"patch":[[{"diffs":[[0,"/\napp.de"],[1,"l"],[0,"('/user'"]],"start1":1010,"start2":1010,"length1":16,"length2":17}]],"length":2613,"saved":false}
{"ts":1350257730171,"patch":[[{"diffs":[[0,"ined && name !=="],[1," undefined && participants[id] ==="],[0," undefined){\n   "]],"start1":595,"start2":595,"length1":32,"length2":66}]],"length":2647,"saved":false}
