{"ts":1351594891266,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"var startX = 0;\nvar pixps = 10;\nvar startTS = 0;\nvar index = 0;\nvar buffer = [];\nfunction sketch(ps) {\n  ps.size(800, 400);\n  var linbuf = ps.createGraphics(ps.width*10, ps.height, ps.JAVA2D);\n  var lincbuf = ps.createGraphics(ps.width*10, ps.height, ps.JAVA2D);\n  var linsbuf = ps.createGraphics(ps.width*10, ps.height, ps.JAVA2D);\n  var lintbuf = ps.createGraphics(ps.width*10, ps.height, ps.JAVA2D);\n\n  function hsl2rgb (h, s, l) {\n      /*from http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript*/\n      h = h/360;\n      s = s/100;\n      l = l/100;\n      var r, g, b;\n\n      if(s == 0){\n          r = g = b = l; // achromatic\n      }else{\n          function hue2rgb(p, q, t){\n              if(t < 0) t += 1;\n              if(t > 1) t -= 1;\n              if(t < 1/6) return p + (q - p) * 6 * t;\n              if(t < 1/2) return q;\n              if(t < 2/3) return p + (q - p) * (2/3 - t) * 6;\n              return p;\n          }\n\n          var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n          var p = 2 * l - q;\n          r = hue2rgb(p, q, h + 1/3);\n          g = hue2rgb(p, q, h);\n          b = hue2rgb(p, q, h - 1/3);\n      }\n\n      return [r * 255, g * 255, b * 255];\n    }\n\n    function splatter(x, y, rad, level, r, g, b, buf) {\n      buf.noStroke();\n      buf.fill(r, g, b, 170);\n      buf.ellipse(x, y, rad * 2, rad * 2);\n      if (level > 1 ) {\n        level --;\n        var num = Math.round(ps.random(2, 5));\n        for (var i = 0; i < num; i ++) {\n          var a = ps.random(0, ps.TWO_PI);\n          var nx = x + ps.cos(a) * 6.0 * level;\n          var ny = y + ps.sin(a) * 6.0 * level;\n          splatter(nx, ny, rad/2, level, r, g, b, buf);\n        }\n      }\n    }\n\n    function drawSpiral(data, r, g, b, i) {\n      usethissomewhere = (i/30);\n      i = i%30;\n\n      if (data.spiralprocessed !== undefined) return;\n\n      var x = (10*i*Math.cos(i) + (ps.width/2));\n      var y = (10*i*Math.sin(i) + (ps.height/2));\n      splatter(x, y, 15, parseInt(data.amplitude,10), r, g, b, ps);\n      data.spiralprocessed = true;\n    }\n\n    function chooseLinearPos(data) {\n      var ts = parseInt(data.time,10);\n      var x = (ts - startTS)*pixps;\n      return [x, ps.width/2];\n    }\n\n    function drawLinear(data, r, g, b) {\n      linbuf.beginDraw();\n      linbuf.noStroke();\n      var xy = chooseLinearPos(data);\n      linbuf.rect(xy[0], xy[1], pixps,\n      (100 + (parseInt(data.amplitude,10) * 10)), 5)\n      linbuf.endDraw();\n    }\n\n    function drawLinearSplatters(data, r, g, b){\n      linsbuf.beginDraw();\n      linsbuf.noStroke();\n      var xy = chooseLinearPos(data);\n      splatter(xy[0], xy[1], 15, parseInt(data.amplitude,10), r, g, b, linsbuf);\n      linsbuf.endDraw();\n    }\n\n    function drawLinearCircles(data, r, g, b) {\n      lincbuf.beginDraw();\n      lincbuf.noStroke();\n      var xy = chooseLinearPos(data);\n      var rad = (parseInt(data.amplitude,10) * 4);\n      lincbuf.fill(r, g, b, 170);\n      lincbuf.ellipse(xy[0], xy[0], rad * 2, rad * 2);\n      lincbuf.endDraw();\n    }\n\n    function drawClock(data, r, g, b) {\n    }\n\n    function drawTimeLine(data, r, g, b) {\n    }\n\n  while (buffer.length > 0) {\n    var data = buffer.pop();\n      var rgb = hsl2rgb(parseInt(data.h, 10),\n                        parseInt(data.s, 10),\n                        parseInt(data.l, 10));\n      var r = rgb[0];\n      var g = rgb[1];\n      var b = rgb[2];\n      if (index == 0) {\n        startTS = parseInt(data.time, 10);\n      }\n      drawLinear(data, r, g, b);\n      drawLinearCircles(data, r, g, b);\n      drawLinearSplatters(data, r, g, b);\n      //drawTimeLine(data, r, g, b);\n  }\n\n  ps.draw = function() {\n\n\n    ps.background(255);\n\n    var img = undefined;\n    switch(type) {\n      case 'spiral': break;\n      case 'linear': img = linbuf.get(startX, 0, ps.width, linbuf.height); break;\n      case 'lsplatters': img = linsbuf.get(startX, 0, ps.width, linsbuf.height); break;\n      case 'lcircles': img = lincbuf.get(startX, 0, ps.width, lincbuf.height); break;\n      case 'clock':  break;\n      case 'timeline': break;//img = lintbuf.get(startX, 0, ps.width, lintbuf.height); break;\n    }\n\n    if (img !== undefined) {\n      console.log(img)\n      ps.image(img, 0, 0);\n    }\n  };\n}\n"]],"start1":0,"start2":0,"length1":0,"length2":4256}]],"length":4256}
