{"ts":1350167265180,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/*\n* Copyright (c) 2011 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n* use this file except in compliance with the License. You may obtain a copy of\n* the License at\n*\n* http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n* WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n* License for the specific language governing permissions and limitations under\n* the License.\n*/\nvar serverPath = '//YOUR_APP_ID.appspot.com/';\n\n// The functions triggered by the buttons on the Hangout App\nfunction countButtonClick() {\n  // Note that if you click the button several times in succession,\n  // if the state update hasn't gone through, it will submit the same\n  // delta again.  The hangout data state only remembers the most-recent\n  // update.\n  console.log('Button clicked.');\n  var value = 0;\n  var count = gapi.hangout.data.getState()['count'];\n  if (count) {\n    value = parseInt(count);\n  }\n\n  console.log('New count is ' + value);\n  // Send update to shared state.\n  // NOTE:  Only ever send strings as values in the key-value pairs\n  gapi.hangout.data.submitDelta({'count': '' + (value + 1)});\n}\n\nfunction resetButtonClick() {\n  console.log('Resetting count to 0');\n  gapi.hangout.data.submitDelta({'count': '0'});\n}\n\nvar forbiddenCharacters = /[^a-zA-Z!0-9_\\- ]/;\nfunction setText(element, text) {\n  element.innerHTML = typeof text === 'string' ?\n      text.replace(forbiddenCharacters, '') :\n      '';\n}\n\nfunction getMessageClick() {\n  console.log('Requesting message from main.py');\n  var http = new XMLHttpRequest();\n  http.open('GET', serverPath);\n  http.onreadystatechange = function() {\n    if (this.readyState == 4 && this.status == 200) {\n      var jsonResponse = JSON.parse(http.responseText);\n      console.log(jsonResponse);\n\n      var messageElement = document.getElementById('message');\n      setText(messageElement, jsonResponse['message']);\n    }\n  }\n  http.send();\n}\n\nfunction updateStateUi(state) {\n  var countElement = document.getElementById('count');\n  var stateCount = state['count'];\n  if (!stateCount) {\n    setText(countElement, 'Probably 0');\n  } else {\n    setText(countElement, stateCount.toString());\n  }\n}\n\nfunction updateParticipantsUi(participants) {\n  console.log('Participants count: ' + participants.length);\n  var participantsListElement = document.getElementById('participants');\n  setText(participantsListElement, participants.length.toString());\n}\n\n// A function to be run at app initialization time which registers our callbacks\nfunction init() {\n  console.log('Init app.');\n\n  var apiReady = function(eventObj) {\n    if (eventObj.isApiReady) {\n      console.log('API is ready');\n\n      gapi.hangout.data.onStateChanged.add(function(eventObj) {\n        updateStateUi(eventObj.state);\n      });\n      gapi.hangout.onParticipantsChanged.add(function(eventObj) {\n        updateParticipantsUi(eventObj.participants);\n      });\n\n      updateStateUi(gapi.hangout.data.getState());\n      updateParticipantsUi(gapi.hangout.getParticipants());\n\n      gapi.hangout.onApiReady.remove(apiReady);\n    }\n  };\n\n  // This application is pretty simple, but use this special api ready state\n  // event if you would like to any more complex app setup.\n  gapi.hangout.onApiReady.add(apiReady);\n}\n\ngadgets.util.registerOnLoadHandler(init);\n"]],"start1":0,"start2":0,"length1":0,"length2":3466}]],"length":3466}
